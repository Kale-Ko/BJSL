plugins {
    id "java"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.toVersion(project.java_version)
targetCompatibility = JavaVersion.toVersion(project.java_version)

archivesBaseName = "bjsl"
group = "io.github.kale_ko"
version = project.project_version

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:${project.jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${project.jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:${project.jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${project.jackson_version}"
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }

        resources {
            srcDir "src/main/resources"
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.toVersion(project.java_version)
    targetCompatibility = JavaVersion.toVersion(project.java_version)

    options.encoding = "UTF-8"
}

jar {
    sourceCompatibility = JavaVersion.toVersion(project.java_version)
    targetCompatibility = JavaVersion.toVersion(project.java_version)

    manifest {
        attributes "Name": "io/github/kale_ko/bjsl/",
            "Specification-Title": "BJSL",
            "Specification-Version": project.version,
            "Specification-Vendor": "Kale-Ko",
            "Implementation-Title": "io.github.kale_ko.bjsl",
            "Implementation-Version": project.version,
            "Implementation-Vendor": "Kale-Ko",
            "Sealed": true
    }
}

tasks.register("fatJar", Jar) {
    sourceCompatibility = JavaVersion.toVersion(project.java_version)
    targetCompatibility = JavaVersion.toVersion(project.java_version)

    archiveClassifier = "fat"
    manifest {
        attributes "Name": "io/github/kale_ko/bjsl/",
            "Specification-Title": "BJSL",
            "Specification-Version": project.version,
            "Specification-Vendor": "Kale-Ko",
            "Implementation-Title": "io.github.kale_ko.bjsl",
            "Implementation-Version": project.version,
            "Implementation-Vendor": "Kale-Ko",
            "Sealed": true
    }

    duplicatesStrategy = "exclude"
    from(sourceSets.main.output)
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? null : zipTree(it).matching { exclude "META-INF/**" } })
}

build {
    finalizedBy tasks.fatJar
}

javadoc {
    title = project.name + " " + project.version

    doFirst {
        mkdir "./build/"
        mkdir "./build/docs/"
        file("./build/docs/overview.html").text = "<html><body><p class=\"overview\">" + project.project_description + "</p></body></html>"
    }

    options {
        overview "build/docs/overview.html"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHub-Packages"
            url = "https://maven.pkg.github.com/Kale-Ko/BJSL"

            credentials {
                username = System.getenv("GH_PACKAGES_USER")
                password = System.getenv("GH_PACKAGES_TOKEN")
            }
        }
    }

    publications {
        ghp(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact tasks.jar
            artifact tasks.fatJar
            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            pom.withXml {
                def node = asNode()

                def packagingNode = node.appendNode("packaging", "jar")

                def licenseNode = node.appendNode("licenses").appendNode("license")
                licenseNode.appendNode("name", "MIT")
                licenseNode.appendNode("url", "https://opensource.org/licenses/MIT")

                def developerNode = node.appendNode("developers").appendNode("developer")
                developerNode.appendNode("id", "kale-ko")
                developerNode.appendNode("name", "Kale Ko")
                developerNode.appendNode("url", "https://kaleko.dev/")
                developerNode.appendNode("email", "contact@kaleko.dev")

                def scmNode = node.appendNode("scm")
                scmNode.appendNode("connection", "scm:git:git@github.com:Kale-Ko/BJSL.git")
                scmNode.appendNode("developerConnection", "scm:git:git@github.com:Kale-Ko/BJSL.git")
                scmNode.appendNode("tag", "master")
                scmNode.appendNode("url", "https://github.com/Kale-Ko/BJSL")

                def dependenciesNode = node.appendNode("dependencies")

                def dependencyManagmentNode = node.appendNode("dependencyManagement")
                def dependenciesManagmentNode = dependencyManagmentNode.appendNode("dependencies")

                configurations.runtimeClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().each {
                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", it.moduleGroup)
                    dependencyNode.appendNode("artifactId", it.moduleName)
                    dependencyNode.appendNode("version", it.moduleVersion)
                }

                configurations.compileClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().each {
                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", it.moduleGroup)
                    dependencyNode.appendNode("artifactId", it.moduleName)
                    dependencyNode.appendNode("version", it.moduleVersion)
                }
            }
        }
    }
}