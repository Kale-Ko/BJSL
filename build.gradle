plugins {
    id "java"
    id "java-library"
    id "com.gradleup.shadow" version "8.3.3"
    id "maven-publish"
}

group = "io.github.kale_ko"
version = project_version

repositories {
    maven {
        name = "Kales-Maven"
        url = "https://maven.kaleko.dev/public-snapshot/"
    }
    mavenCentral()
}

dependencies {
    api "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"

    compileOnly "org.jetbrains:annotations:24.0.1"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(java_version)
    }

    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jar {
    manifest {
        attributes "Name": "io/github/kale_ko/bjsl/",
                "Specification-Title": "BJSL",
                "Specification-Version": project_version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.bjsl",
                "Implementation-Version": project_version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }
}

shadowJar {
    archiveClassifier = "fat"
}

build {
    finalizedBy tasks.shadowJar
}

javadoc {
    title = project.name + " " + project.version

    options.encoding = "UTF-8"
    options.locale = "en"

    options.showFromProtected()

    options.linkSource = true
    options.noDeprecatedList = true

    options.author = true
    options.version = true

    options.tags = ["apiNote:TCMF:API note:", "implNote:TCMF:Implementation note:"]

    doFirst {
        mkdir "./build/"
        mkdir "./build/docs/"
        file("./build/docs/overview.html").text = "<html><body><p class=\"overview\">" + project_description + "</p></body></html>"
    }

    options {
        overview "build/docs/overview.html"
    }
}

publishing {
    repositories {
        mavenLocal()

        maven {
            name = "Kales-Maven-Snapshot"
            url = "https://maven.kaleko.dev/public-snapshot/"

            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_TOKEN")
            }
        }

        if ("release".equalsIgnoreCase(System.getenv("MAVEN_TYPE"))) {
            maven {
                name = "Kales-Maven-Release"
                url = "https://maven.kaleko.dev/public-release/"

                credentials {
                    username = System.getenv("MAVEN_USER")
                    password = System.getenv("MAVEN_TOKEN")
                }
            }
            maven {
                name = "GitHub-Packages-Release"
                url = "https://maven.pkg.github.com/Kale-Ko/BJSL/"

                credentials {
                    username = System.getenv("GH_PACKAGES_USER")
                    password = System.getenv("GH_PACKAGES_TOKEN")
                }
            }
        }
    }

    publications {
        main(MavenPublication) {
            groupId = group
            artifactId = "bjsl"
            version = project_version

            artifact tasks.jar
            artifact tasks.shadowJar
            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            pom.withXml {
                def node = asNode()

                node.appendNode("packaging", "jar")

                def licenseNode = node.appendNode("licenses").appendNode("license")
                licenseNode.appendNode("name", "MIT")
                licenseNode.appendNode("url", "https://opensource.org/licenses/MIT")

                def developerNode = node.appendNode("developers").appendNode("developer")
                developerNode.appendNode("id", "kale-ko")
                developerNode.appendNode("name", "Kale Ko")
                developerNode.appendNode("url", "https://www.kaleko.dev/")
                developerNode.appendNode("email", "contact@kaleko.dev")

                def scmNode = node.appendNode("scm")
                scmNode.appendNode("connection", "scm:git:git@github.com:Kale-Ko/BJSL.git")
                scmNode.appendNode("developerConnection", "scm:git:git@github.com:Kale-Ko/BJSL.git")
                scmNode.appendNode("tag", "main")
                scmNode.appendNode("url", "https://github.com/Kale-Ko/BJSL/")

                def dependenciesNode = node.appendNode("dependencies")

                def compileDependencies = []

                configurations.compileClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().each {
                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", it.moduleGroup)
                    dependencyNode.appendNode("artifactId", it.moduleName)
                    dependencyNode.appendNode("version", it.moduleVersion)
                    dependencyNode.appendNode("scope", "compile")

                    compileDependencies.push(it.moduleGroup + ":" + it.moduleName + ":" + it.moduleVersion)
                }

                configurations.runtimeClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().each {
                    if (compileDependencies.contains(it.moduleGroup + ":" + it.moduleName + ":" + it.moduleVersion)) {
                        return
                    }

                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", it.moduleGroup)
                    dependencyNode.appendNode("artifactId", it.moduleName)
                    dependencyNode.appendNode("version", it.moduleVersion)
                    dependencyNode.appendNode("scope", "runtime")
                }
            }
        }
    }
}